@model IEnumerable<pzaleszczyk.Models.Author>

@{
    ViewData["Title"] = "Index";

}

<h1>Index</h1>


<p>
    @if ((await AuthorizationService.AuthorizeAsync(User, "EditPolicy")).Succeeded)
    {
        <a asp-action="Create">Create New</a>
    }
</p>
<table class="table" border="3">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]">@Html.DisplayNameFor(model => model.Name)</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["SurNameSortParm"]">@Html.DisplayNameFor(model => model.Surname)</a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Website)
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]">@Html.DisplayNameFor(model => model.Birthday)</a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Surname)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Website)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Birthday)
                </td>
                <td>
                    @if ((await AuthorizationService.AuthorizeAsync(User, "EditPolicy")).Succeeded)
                    {
                        <u><a asp-action="Edit" asp-route-id="@item.Id">Edit</a></u>
                        <br />
                        <u><a asp-action="Delete" asp-route-id="@item.Id">Delete</a></u>
                        <br />
                    }
                    <u><a asp-action="Details" asp-route-id="@item.Id">Details</a></u>
                </td>
            </tr>
        }
    </tbody>
</table>


    @*@await Html.PartialAsync("_IndexPartial", Model.Mangas[0].Title)*@



@{
    //RenderPartialAsync. Ta metoda nie zwraca elementu IHtmlContent. Przesyła strumieniowo renderowane dane wyjściowe bezpośrednio do odpowiedzi.
    int index = 0;
   
    foreach (var section in Model)
    {
       index++;
    }
    var random = new Random().Next(index);
    if(index > 0)
    await Html.RenderPartialAsync("_IndexXPartial", Model,
        new ViewDataDictionary(ViewData) { { "index", random } }
    );

}